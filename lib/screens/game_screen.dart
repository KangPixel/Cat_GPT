import 'package:flutter/material.dart';
import 'package:flame/game.dart';
import '../cat_racing_game.dart';
import '../models/cat.dart';
import '../screens/character_selection_screen.dart';
import '../screens/ranking_screen.dart';
import '../components/lottie_cat_runner.dart';
import '../lottie_background.dart'; // ‚úÖ Î∞∞Í≤Ω import ÌôïÏù∏!

class GameScreen extends StatefulWidget {
  final Cat selectedCat;

  const GameScreen({Key? key, required this.selectedCat}) : super(key: key);

  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  late CatRacingGame catRacingGame;

  final Map<String, String> catNameMap = {
    'one': 'Player',
    'two': 'Ìù∞ÎÉ•Ïù¥',
    'three': 'Í∞àÎÉ•Ïù¥',
    'four': 'ÏïÑÏù¥Î≥¥Î¶¨ÎÉ•Ïù¥',
  };

  @override
  void initState() {
    super.initState();
    catRacingGame = CatRacingGame(selectedCat: widget.selectedCat);

    // ‚úÖ Ïò§Î≤ÑÎ†àÏù¥ Ï∂îÍ∞Ä (Î∞∞Í≤Ω + Í≥†ÏñëÏù¥)
    WidgetsBinding.instance.addPostFrameCallback((_) {
      catRacingGame.overlays.add('background'); // üî• Î∞∞Í≤Ω Ï∂îÍ∞Ä
      for (var cat in catRacingGame.catRunners) {
        catRacingGame.overlays.add(cat.color); // üî• Í≥†ÏñëÏù¥ Ï∂îÍ∞Ä
      }
    });

    // ‚úÖ Î†àÏù¥Ïä§ Ï¢ÖÎ£å Í∞êÏßÄ ÌõÑ Í≤∞Í≥º ÌôîÎ©¥ Ïù¥Îèô
    catRacingGame.addListener(() {
      if (catRacingGame.isRaceFinished) {
        Future.delayed(Duration(milliseconds: 500), () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => RankingScreen(
                raceResults: catRacingGame.raceResults,
                isPlayerWinner: catRacingGame.raceResults.isNotEmpty &&
                    catRacingGame.raceResults[0]['color'] == 'one',
              ),
            ),
          );
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Í≥†ÏñëÏù¥ Í≤ΩÏ£º')),
      body: Stack(
        children: [
          Positioned.fill(
            child: GameWidget(
              game: catRacingGame,
              overlayBuilderMap: {
                // ‚úÖ Î∞∞Í≤ΩÏùÑ Ïò¨Î∞îÎ•¥Í≤å Ï∂îÍ∞Ä (Ïò§Î•ò Ìï¥Í≤∞!)
                'background': (context, _) => const LottieBackgroundWidget(
                  lottieFile: 'assets/car_background.json',
                ),

                // ‚úÖ Í≥†ÏñëÏù¥ Ïï†ÎãàÎ©îÏù¥ÏÖò Overlay Ï∂îÍ∞Ä
                'one': (context, _) => catRacingGame.catRunners.isNotEmpty
                    ? catRacingGame.catRunners[0].buildLottieOverlay(context)
                    : Container(),
                'two': (context, _) => catRacingGame.catRunners.length > 1
                    ? catRacingGame.catRunners[1].buildLottieOverlay(context)
                    : Container(),
                'three': (context, _) => catRacingGame.catRunners.length > 2
                    ? catRacingGame.catRunners[2].buildLottieOverlay(context)
                    : Container(),
                'four': (context, _) => catRacingGame.catRunners.length > 3
                    ? catRacingGame.catRunners[3].buildLottieOverlay(context)
                    : Container(),
              },
            ),
          ),

          if (catRacingGame.isRaceFinished)
            Positioned(
              top: 20,
              left: 20,
              right: 20,
              child: Column(
                children: [
                  const Text('üèÜ Í≤ΩÏ£º Í≤∞Í≥º üèÜ', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                  for (int i = 0; i < catRacingGame.raceResults.length; i++)
                    Text(
                      '${i + 1}ÏúÑ: ${catNameMap[catRacingGame.raceResults[i]['name']] ?? catRacingGame.raceResults[i]['name']}',
                      style: TextStyle(
                        fontSize: catRacingGame.raceResults[i]['name'] == widget.selectedCat.color ? 22 : 18,
                        fontWeight: FontWeight.bold,
                        color: catRacingGame.raceResults[i]['color'] == widget.selectedCat.color ? Colors.red : Colors.black,
                      ),
                    ),
                  const SizedBox(height: 20),

                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const CharacterSelectionScreen(),
                        ),
                      );
                    },
                    child: const Text('Îã§Ïãú ÌïòÍ∏∞'),
                  ),

                  const SizedBox(height: 10),

                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushNamedAndRemoveUntil(
                        context,
                        '/',
                        (route) => false,
                      );
                    },
                    child: const Text('Î©îÏù∏ÏúºÎ°ú'),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}
